Parameters:
  AllowedCidrBlock:
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a CIDR block range between x.x.x.x\16 and x.x.x.x\32
    Description: The CIDR block range you want to allow to access the VPC (i.e. home / school I.P. address)
    Type: String
  VPCCidrBlock:
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]))?$
    ConstraintDescription: must be a CIDR block range between x.x.x.x\16 and x.x.x.x\32
    Description: The CIDR block range you want to allow to access the VPC (i.e. home / school I.P. address)
    Default: 10.0.0.0/25
    Type: String
Resources:
  # Search for the following headers in the vpc.yaml file for easy access
  # Associations, Internet Gateway, Nat Gateway, Network ACL Router, Security Groups, Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
  # Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnet2
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PrivateSubnet2

# Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Nat Gateways
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Network ACL
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  HTTPNaclIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref AllowedCidrBlock
      NetworkAclId: !Ref NetworkAcl
      RuleAction: allow
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
  HTTPNaclEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref AllowedCidrBlock
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      RuleAction: allow
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
  HTTPSNaclIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref AllowedCidrBlock
      NetworkAclId: !Ref NetworkAcl
      RuleAction: allow
      RuleNumber: 101
      Protocol: 6
      PortRange:
        From: 443
        To: 443
  HTTPSNaclEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref AllowedCidrBlock
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      RuleAction: allow
      RuleNumber: 101
      Protocol: 6
      PortRange:
        From: 443
        To: 443
  SSHNaclIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref AllowedCidrBlock
      NetworkAclId: !Ref NetworkAcl
      RuleAction: allow
      RuleNumber: 102
      Protocol: 6
      PortRange:
        From: 22
        To: 22
  SSHNaclEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref AllowedCidrBlock
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      RuleAction: allow
      RuleNumber: 102
      Protocol: 6
      PortRange:
        From: 22
        To: 22

  # Routers Public
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RoutePublic1:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable1
  RoutePublic2:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable2
  

  # Routers Private
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RoutePrivate1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1
  RoutePrivate2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows communication over HTTP to a specific CIDR block
      GroupName: HTTP Security Group
      VpcId: !Ref VPC
  HTTPIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref AllowedCidrBlock
      GroupId: !Ref HTTPSecurityGroup
  HTTPEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref AllowedCidrBlock
      GroupId: !Ref HTTPSecurityGroup
  HTTPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows communication over HTTPS to a specific CIDR block
      GroupName: HTTPS Security Group
      VpcId: !Ref VPC
  HTTPSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref AllowedCidrBlock
      GroupId: !Ref HTTPSSecurityGroup
  HTTPSEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref AllowedCidrBlock
      GroupId: !Ref HTTPSSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows communication over SSH to a specific CIDR block
      GroupName: SSH Security Group
      VpcId: !Ref VPC
  SSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AllowedCidrBlock
      GroupId: !Ref SSHSecurityGroup
  SSHEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AllowedCidrBlock
      GroupId: !Ref SSHSecurityGroup

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [ 0, !Cidr [ !Ref VPCCidrBlock, 4, 5 ] ]
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [ 1, !Cidr [ !Ref VPCCidrBlock, 4, 5 ] ]
      VpcId: !Ref VPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !Ref VPCCidrBlock, 4, 5 ] ]
      VpcId: !Ref VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !Ref VPCCidrBlock, 4, 5 ] ]
      VpcId: !Ref VPC
